import asyncio 
import aiosqlite
import re
from datetime import datetime, timedelta, timezone
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TOKEN = "8274894041:AAGEJSRDxWHbEriVnneByDtZtK_qu-vmflU"
GROUP_ID = -1003083789411  # —Ç–≤—ñ–π –≥—Ä—É–ø ID
DAILY_BUDGET = 1000
TIMEZONE_OFFSET = 2  # —Ç–≤—ñ–π –ø–æ—è—Å UTC+2

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

DB_PATH = "budget.db"

# --- –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ ---
last_amount = 0
last_comment = ""

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î ---
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS budget (
                day TEXT PRIMARY KEY,
                expenses INTEGER DEFAULT 0,
                savings INTEGER DEFAULT 0,
                carried_over INTEGER DEFAULT 0
            )
        """)
        await db.commit()

# --- –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–Ω—è ---
async def get_day_data(day: str):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT expenses, savings, carried_over FROM budget WHERE day=?", (day,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return row[0], row[1], row[2]
            else:
                await db.execute("INSERT INTO budget (day, expenses, savings, carried_over) VALUES (?, 0, 0, 0)", (day,))
                await db.commit()
                return 0, 0, 0

# --- –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—å ---
async def get_month_expenses(year: int, month: int):
    month_str = f"{year}-{month:02d}-%"
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT SUM(expenses) FROM budget WHERE day LIKE ?", (month_str,)) as cursor:
            row = await cursor.fetchone()
            return row[0] if row[0] else 0

# --- –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –¥–Ω—è ---
async def update_day(day: str, expenses: int, savings: int, carried_over: int = 0):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("REPLACE INTO budget (day, expenses, savings, carried_over) VALUES (?, ?, ?, ?)",
                         (day, expenses, savings, carried_over))
        await db.commit()

# --- –•–µ–Ω–¥–ª–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@dp.message()
async def handle_message(message: Message):
    global last_amount, last_comment

    if message.chat.id != GROUP_ID:
        return

    text_msg = message.text.strip()

    # --- /—ñ–Ω—Ñ–æ ---
    if text_msg == "/—ñ–Ω—Ñ–æ":
        help_text = (
            "üìå <b>–ö–æ–º–∞–Ω–¥–∏:</b>\n\n"
            "üîÑ /—á ‚Äì —Å–∫–∞—Å—É–≤–∞—Ç–∏ <u>–æ—Å—Ç–∞–Ω–Ω—é –≤–∏—Ç—Ä–∞—Ç—É</u>.\n"
            "üßπ /–¥ ‚Äì –≤–∏–¥–∞–ª–∏—Ç–∏ <u>—É—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ</u>, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è 23:00 —É—á–æ—Ä–∞.\n"
            "üìä /–∑–≤—ñ—Ç ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç).\n"
            "‚ÑπÔ∏è /—ñ–Ω—Ñ–æ ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
        )
        await message.reply(help_text, parse_mode="HTML")
        return

    # --- /–∑–≤—ñ—Ç ---
    if text_msg == "/–∑–≤—ñ—Ç":
        today = datetime.now(timezone.utc) + timedelta(hours=TIMEZONE_OFFSET)
        today_str = today.strftime("%Y-%m-%d")
        yesterday = (today - timedelta(days=1)).strftime("%Y-%m-%d")
        month_name = today.strftime("%B")
        year, month = today.year, today.month

        expenses, savings, carried_over = await get_day_data(today_str)
        yesterday_expenses, _, _ = await get_day_data(yesterday)

        # –ê–∫—Ç—É–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç
        available_budget = DAILY_BUDGET - carried_over if carried_over > 0 else DAILY_BUDGET
        balance = max(0, available_budget - expenses)
        month_expenses = await get_month_expenses(year, month)

        text = (
            f"üìä <b>–ó–≤—ñ—Ç –∑–∞ {today_str}</b>\n\n"
            f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ: {expenses} –≥—Ä–Ω\n"
            f"üìâ –ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {balance} –≥—Ä–Ω\n"
            f"üí∞ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {savings} –≥—Ä–Ω\n"
            f"üóìÔ∏è –í—Å—å–æ–≥–æ –∑–∞ –º—ñ—Å—è—Ü—å: {month_expenses} –≥—Ä–Ω"
        )
        if carried_over > 0:
            text += f"\n‚ö†Ô∏è –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑ –º–∏–Ω—É–ª–æ–≥–æ –¥–Ω—è: {carried_over} –≥—Ä–Ω"

        await message.reply(text, parse_mode="HTML")
        return

    # --- /–¥: —Å–∫–∏–¥–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç ---
    if text_msg == "/–¥":
        today = datetime.now(timezone.utc) + timedelta(hours=TIMEZONE_OFFSET)
        yesterday = (today - timedelta(days=1)).strftime("%Y-%m-%d")
        today_str = today.strftime("%Y-%m-%d")
        month_name = today.strftime("%B")
        year, month = today.year, today.month

        _, yesterday_savings, yesterday_carried_over = await get_day_data(yesterday)
        await update_day(today_str, 0, yesterday_savings, yesterday_carried_over)

        available_budget = DAILY_BUDGET - yesterday_carried_over if yesterday_carried_over > 0 else DAILY_BUDGET
        month_expenses = await get_month_expenses(year, month)

        text = (
            f"üßπ –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ {today_str} —Å–∫–∏–Ω—É—Ç–æ.\n\n"
            f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: 0 –≥—Ä–Ω\n"
            f"üìâ –ó–∞–ª–∏—à–æ–∫: {available_budget} –≥—Ä–Ω\n"
            f"üí∞ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {yesterday_savings} –≥—Ä–Ω\n"
            f"üóìÔ∏è –í—Å—å–æ–≥–æ –∑–∞ –º—ñ—Å—è—Ü—å: {month_expenses} –≥—Ä–Ω"
        )
        if yesterday_carried_over > 0:
            text += f"\n‚ö†Ô∏è –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –±–æ—Ä–≥: {yesterday_carried_over} –≥—Ä–Ω"

        await message.reply(text)
        return

    # --- /—á: –≤—ñ–¥–∫–∞—Ç ---
    if text_msg == "/—á":
        if last_amount == 0:
            await message.reply("–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
            return

        today = datetime.now(timezone.utc) + timedelta(hours=TIMEZONE_OFFSET)
        today_str = today.strftime("%Y-%m-%d")
        month_name = today.strftime("%B")
        year, month = today.year, today.month

        expenses, savings, carried_over = await get_day_data(today_str)
        expenses = max(0, expenses - last_amount)

        available_budget = DAILY_BUDGET - carried_over if carried_over > 0 else DAILY_BUDGET
        balance = max(0, available_budget - expenses)

        await update_day(today_str, expenses, savings, carried_over)
        month_expenses = await get_month_expenses(year, month)

        text = (
            f"‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {last_amount} –≥—Ä–Ω\n\n"
            f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {expenses} –≥—Ä–Ω\n"
            f"üìâ –ó–∞–ª–∏—à–æ–∫: {balance} –≥—Ä–Ω\n"
            f"üí∞ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {savings} –≥—Ä–Ω\n"
            f"üóìÔ∏è –í—Å—å–æ–≥–æ –∑–∞ –º—ñ—Å—è—Ü—å: {month_expenses} –≥—Ä–Ω"
        )
        if carried_over > 0:
            text += f"\n‚ö†Ô∏è –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –±–æ—Ä–≥: {carried_over} –≥—Ä–Ω"

        last_amount = 0
        last_comment = ""
        await message.reply(text)
        return

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ ---
    try:
        match = re.match(r"^([\d\.,]+)(?:\s*(.*))?$", text_msg)
        if not match:
            return
        raw_amount = match.group(1).replace(",", ".")
        amount = int(float(raw_amount))
        comment = match.group(2) if match.group(2) else ""
    except Exception:
        return

    today = datetime.now(timezone.utc) + timedelta(hours=TIMEZONE_OFFSET)
    today_str = today.strftime("%Y-%m-%d")
    month_name = today.strftime("%B")
    year, month = today.year, today.month

    expenses, savings, carried_over = await get_day_data(today_str)
    expenses += amount

    available_budget = DAILY_BUDGET - carried_over if carried_over > 0 else DAILY_BUDGET
    balance = max(0, available_budget - expenses)

    await update_day(today_str, expenses, savings, carried_over)

    last_amount = amount
    last_comment = comment
    month_expenses = await get_month_expenses(year, month)

    text = f"üî¥ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç–∏: {amount} –≥—Ä–Ω"
    if comment:
        text += f"  <i>({comment})</i>"
    text += (
        f"\n\nüî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {expenses} –≥—Ä–Ω\n"
        f"üìâ –ó–∞–ª–∏—à–æ–∫: {balance} –≥—Ä–Ω\n"
        f"üí∞ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {savings} –≥—Ä–Ω\n"
        f"üóìÔ∏è –í—Å—å–æ–≥–æ –∑–∞ –º—ñ—Å—è—Ü—å: {month_expenses} –≥—Ä–Ω"
    )
    if carried_over > 0:
        text += f"\n‚ö†Ô∏è –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –±–æ—Ä–≥: {carried_over} –≥—Ä–Ω"

    await message.reply(text, parse_mode="HTML")

# --- –ê–≤—Ç–æ–∑–≤—ñ—Ç –æ 23:00 ---
async def daily_summary():
    global last_amount
    await init_db()
    local_tz = timezone(timedelta(hours=TIMEZONE_OFFSET))

    while True:
        now = datetime.now(local_tz)
        target = datetime.combine(now.date(), datetime.min.time(), tzinfo=local_tz) + timedelta(hours=23)
        if now > target:
            target += timedelta(days=1)
        wait_seconds = (target - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        today = datetime.now(local_tz)
        day = (today - timedelta(seconds=1)).strftime("%Y-%m-%d")
        next_day = today.strftime("%Y-%m-%d")
        month_name = today.strftime("%B")
        year, month = today.year, today.month

        expenses, savings, carried_over = await get_day_data(day)
        available_budget = DAILY_BUDGET - carried_over if carried_over > 0 else DAILY_BUDGET

        if expenses <= available_budget:
            balance = available_budget - expenses
            savings += balance
            await update_day(next_day, 0, savings, 0)
        else:
            overspend = expenses - available_budget
            await update_day(next_day, 0, savings, overspend)

        month_expenses = await get_month_expenses(year, month)

        text = (
            f"üìä <b>–ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è ({day})</b>\n"
            f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {expenses} –≥—Ä–Ω\n"
            f"üìâ –ó–∞–ª–∏—à–æ–∫: {max(0, available_budget - expenses)} –≥—Ä–Ω\n"
            f"üí∞ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {savings} –≥—Ä–Ω\n"
            f"üóìÔ∏è –í—Å—å–æ–≥–æ –∑–∞ –º—ñ—Å—è—Ü—å: {month_expenses} –≥—Ä–Ω"
        )
        if expenses > available_budget:
            text += f"\n‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è: {expenses - available_budget} –≥—Ä–Ω (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞)"

        try:
            await bot.send_message(GROUP_ID, text, parse_mode="HTML")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {e}")

        last_amount = 0
        last_comment = ""

# --- –ì–æ–ª–æ–≤–Ω–∞ ---
async def main():
    await init_db()
    asyncio.create_task(daily_summary())

    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ polling: {e}")
            await asyncio.sleep(5)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ó—É–ø–∏–Ω–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
