import logging
import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, executor, types
from datetime import datetime, timedelta
import os

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

DAILY_BUDGET = 1000

# --- –ë–ê–ó–ê –î–ê–ù–ò–• ---
conn = sqlite3.connect("budget.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS budget (
    day TEXT PRIMARY KEY,
    expenses INTEGER DEFAULT 0,
    savings INTEGER DEFAULT 0
)
""")
conn.commit()


def get_today():
    return datetime.now().strftime("%Y-%m-%d")


def get_day_data():
    today = get_today()
    cursor.execute("SELECT expenses, savings FROM budget WHERE day=?", (today,))
    row = cursor.fetchone()
    if row:
        return row[0], row[1]
    else:
        cursor.execute("INSERT INTO budget (day, expenses, savings) VALUES (?, 0, 0)", (today,))
        conn.commit()
        return 0, 0


def update_day(expenses, savings):
    today = get_today()
    cursor.execute("REPLACE INTO budget (day, expenses, savings) VALUES (?, ?, ?)", (today, expenses, savings))
    conn.commit()


def carry_over_savings():
    today = get_today()
    cursor.execute("SELECT day, expenses, savings FROM budget ORDER BY day DESC LIMIT 1")
    row = cursor.fetchone()

    if row and row[0] != today:
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –∑–∞–ª–∏—à–æ–∫ –≤ savings
        old_expenses, old_savings = row[1], row[2]
        balance = DAILY_BUDGET - old_expenses
        if balance > 0:
            old_savings += balance
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –¥–µ–Ω—å
        cursor.execute("INSERT OR REPLACE INTO budget (day, expenses, savings) VALUES (?, ?, ?)", (today, 0, old_savings))
        conn.commit()


# --- –ë–û–¢ --- 
def format_balance(expenses, savings):
    balance = DAILY_BUDGET - expenses
    color_balance = "üü¢" if balance >= 0 else "üî¥"
    return balance, color_balance, savings


@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –≤–∏—Ç—Ä–∞—Ç.\n"
                         "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É:\n"
                         "/–≤–∏—Ç—Ä–∞—Ç–∞ <—Å—É–º–∞> <–æ–ø–∏—Å>")


@dp.message_handler(commands=["–≤–∏—Ç—Ä–∞—Ç–∞"])
async def add_expense(message: types.Message):
    carry_over_savings()
    expenses, savings = get_day_data()

    try:
        args = message.text.split(maxsplit=2)
        amount = int(args[1])
        category = args[2] if len(args) > 2 else "–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
    except (IndexError, ValueError):
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /–≤–∏—Ç—Ä–∞—Ç–∞ <—Å—É–º–∞> <–æ–ø–∏—Å>")
        return

    expenses += amount
    update_day(expenses, savings)

    balance, color_balance, savings = format_balance(expenses, savings)
    text = (f"‚úÖ –í–∏—Ç—Ä–∞—Ç–∞: üî¥{amount} –≥—Ä–Ω ({category})\n"
            f"üìâ –ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {color_balance}{balance} –≥—Ä–Ω\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: üü¢{savings} –≥—Ä–Ω")
    await message.answer(text)


@dp.message_handler(commands=["—Å—Ç–∞—Ç—É—Å"])
async def status_cmd(message: types.Message):
    carry_over_savings()
    expenses, savings = get_day_data()
    balance, color_balance, savings = format_balance(expenses, savings)
    await message.answer(f"üìä –°—Ç–∞—Ç—É—Å –¥–Ω—è:\n"
                         f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {expenses} –≥—Ä–Ω\n"
                         f"üìâ –ó–∞–ª–∏—à–æ–∫: {color_balance}{balance} –≥—Ä–Ω\n"
                         f"üí∞ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: üü¢{savings} –≥—Ä–Ω")


# --- –ê–í–¢–û –ó–í–Ü–¢ ---
async def daily_summary():
    while True:
        now = datetime.now()
        target = datetime.combine(now.date(), datetime.min.time()) + timedelta(days=1, minutes=-1)
        wait_seconds = (target - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        expenses, savings = get_day_data()
        balance = DAILY_BUDGET - expenses
        if balance > 0:
            savings += balance
        update_day(0, savings)  # –Ω–æ–≤–∏–π –¥–µ–Ω—å, –≤–∏—Ç—Ä–∞—Ç–∏ –æ–±–Ω—É–ª—è—é—Ç—å—Å—è

        text = (f"üìä –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è: –≤–∏—Ç—Ä–∞—á–µ–Ω–æ üî¥{expenses} –≥—Ä–Ω, "
                f"–∑–∞–ª–∏—à–æ–∫ {'üü¢' if balance >= 0 else 'üî¥'}{balance} –≥—Ä–Ω\n"f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: üü¢{savings} –≥—Ä–Ω")

        # ‚ö†Ô∏è –¢—Ä–µ–±–∞ –≤–∫–∞–∑–∞—Ç–∏ ID –≥—Ä—É–ø–∏ –≤—Ä—É—á–Ω—É –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        CHAT_ID = os.getenv("CHAT_ID")
        if CHAT_ID:
            try:
                await bot.send_message(chat_id=CHAT_ID, text=text)
            except:
                pass


if name == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(daily_summary())
    executor.start_polling(dp, skip_updates=True)
