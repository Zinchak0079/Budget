import asyncio
import aiosqlite
import re
import calendar
from datetime import datetime, date, timedelta, timezone
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TOKEN = "8274894041:AAGEJSRDxWHbEriVnneByDtZtK_qu-vmflU"
GROUP_ID = -1003083789411
DAILY_LIMIT = 1000
TIMEZONE_OFFSET = 2  # UTC+2

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

DB_PATH = "budget.db"

last_amount = 0
last_comment = ""


# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î ---
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # –æ—Å–Ω–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è (—Å—Ç–∞–Ω –¥–Ω—è)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS budget (
                day TEXT PRIMARY KEY,
                expenses INTEGER DEFAULT 0,
                savings INTEGER DEFAULT 0,
                overspend INTEGER DEFAULT 0,
                month_expenses INTEGER DEFAULT 0
            )
        """)
        # –ª–æ–≥ —É—Å—ñ—Ö –≤–∏—Ç—Ä–∞—Ç (—â–æ–± /—á –º—ñ–≥ –≤—ñ–¥–º—ñ–Ω—è—Ç–∏ –ø–æ —á–µ—Ä–∑—ñ)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS expenses_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                day TEXT,
                amount INTEGER,
                comment TEXT,
                created_at TEXT
            )
        """)
        # snapshot —Å—Ç–∞–Ω—É –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –¥–Ω—è (—Ç–µ, —â–æ –∑–∞–ø–∏—Å—É—î daily_summary –¥–ª—è next_day)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS snapshots (
                day TEXT PRIMARY KEY,
                expenses INTEGER,
                savings INTEGER,
                overspend INTEGER,
                month_expenses INTEGER
            )
        """)
        await db.commit()


# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ: –ø–µ—Ä—ñ–æ–¥ –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è (–∑ 5-–≥–æ –ø–æ 4-–µ) ---
def get_budget_period(dt: date):
    """–ü–æ–≤–µ—Ä—Ç–∞—î (start_date, end_date) –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É (–∑ 5-–≥–æ –ø–æ 4-–µ)."""
    if dt.day >= 5:
        start = date(dt.year, dt.month, 5)
        # –∫—ñ–Ω–µ—Ü—å = 4 —á–∏—Å–ª–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
        if dt.month == 12:
            end = date(dt.year + 1, 1, 4)
        else:
            end = date(dt.year, dt.month + 1, 4)
    else:
        # –ø–µ—Ä—ñ–æ–¥ –ø–æ—á–∏–Ω–∞–≤—Å—è 5-–≥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º—ñ—Å—è—Ü—è
        if dt.month == 1:
            start = date(dt.year - 1, 12, 5)
        else:
            start = date(dt.year, dt.month - 1, 5)
        end = date(dt.year, dt.month, 4)
    return start, end


# --- –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–Ω—è ---
async def get_day_data(day: str):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT expenses, savings, overspend, month_expenses FROM budget WHERE day=?",
            (day,),
        ) as cursor:
            row = await cursor.fetchone()
            if row:
                return row[0], row[1], row[2], row[3]
            else:
                # —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Å (–ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± –∑–∞–ø–∏—Å–∏ –∑–∞–≤–∂–¥–∏ –±—É–ª–∏)
                await db.execute(
                    "INSERT INTO budget (day, expenses, savings, overspend, month_expenses) VALUES (?, 0, 0, 0, 0)",
                    (day,),
                )
                await db.commit()
                return 0, 0, 0, 0


# --- –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –¥–Ω—è ---
async def update_day(day: str, expenses: int, savings: int, overspend: int, month_expenses: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            INSERT INTO budget (day, expenses, savings, overspend, month_expenses)
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(day) DO UPDATE SET
                expenses = excluded.expenses,
                savings = excluded.savings,
                overspend = excluded.overspend,
                month_expenses = excluded.month_expenses
            """,
            (day, expenses, savings, overspend, month_expenses),
        )
        await db.commit()


# --- Snapshot helpers ---
async def save_snapshot(day: str, expenses: int, savings: int, overspend: int, month_expenses: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            INSERT INTO snapshots (day, expenses, savings, overspend, month_expenses)
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(day) DO UPDATE SET
                expenses=excluded.expenses,
                savings=excluded.savings,
                overspend=excluded.overspend,
                month_expenses=excluded.month_expenses
            """,
            (day, expenses, savings, overspend, month_expenses),
        )
        await db.commit()


async def get_snapshot(day: str):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT expenses, savings, overspend, month_expenses FROM snapshots WHERE day=?", (day,)) as cur:
            r = await cur.fetchone()
            return r if r else None


# --- –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –±—é–¥–∂–µ—Ç–Ω–∏–π –º—ñ—Å—è—Ü—å (–∑ 5-–≥–æ –ø–æ 4-–µ) ---
async def get_month_expenses_for_date(dt: date):
    start, end = get_budget_period(dt)
    start_s = start.strftime("%Y-%m-%d")
    end_s = (end - timedelta(days=0)).strftime("%Y-%m-%d")  # end is inclusive
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT SUM(expenses) FROM budget WHERE day BETWEEN ? AND ?", (start_s, end_s)) as cur:
            row = await cur.fetchone()
            return row[0] if row and row[0] else 0, start, end


# --- –õ–æ–≥ –≤–∏—Ç—Ä–∞—Ç (–¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è) ---
async def log_expense(day: str, amount: int, comment: str):
    created_at = datetime.utcnow().isoformat()
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO expenses_log (day, amount, comment, created_at) VALUES (?, ?, ?, ?)",
                         (day, amount, comment, created_at))
        await db.commit()


# --- –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –≤–∏—Ç—Ä–∞—Ç—É (–≤–∏–¥–∞–ª—è—î –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ –∑ expenses_log –¥–ª—è –¥–Ω—è) ---
async def cancel_last_expense(today_str: str):
    async with aiosqlite.connect(DB_PATH) as db:
        # –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é –≤–∏—Ç—Ä–∞—Ç—É –¥–ª—è today
        async with db.execute("SELECT id, amount FROM expenses_log WHERE day=? ORDER BY id DESC LIMIT 1", (today_str,)) as cur:
            row = await cur.fetchone()
            if not row:
                return None
            exp_id, amount = row

        # –≤–∏–¥–∞–ª—è—î–º–æ –∑ –ª–æ–≥—ñ–≤
        await db.execute("DELETE FROM expenses_log WHERE id=?", (exp_id,))

        # –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é budget (–∑–º–µ–Ω—à—É—î–º–æ expenses —Ç–∞ month_expenses)
        expenses, savings, overspend, month_expenses = await get_day_data(today_str)
        new_expenses = max(0, expenses - amount)
        new_month_expenses = max(0, month_expenses - amount)
        await update_day(today_str, new_expenses, savings, overspend, new_month_expenses)
        await db.commit()
        return amount, new_expenses, savings, overspend, new_month_expenses


# --- –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –≤—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ (–ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—Ç–∞–Ω, –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –≤–Ω–æ—á—ñ) ---
async def revert_to_snapshot_or_yesterday(today_str: str):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å –¥–æ snapshot (—è–∫—â–æ —î) ‚Äî —Ç–æ–±—Ç–æ –¥–æ —Å—Ç–∞–Ω—É, —è–∫–∏–π –∑–∞–ø–∏—Å–∞–≤ daily_summary.
    –Ø–∫—â–æ snapshot –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞–Ω –∑ yesterday_row (—Ñ–æ–ª–±–µ–∫).
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂ (restored_expenses, restored_savings, restored_overspend, restored_month_expenses).
    """
    # 1) —Å–ø—Ä–æ–±–∞ snapshot
    snap = await get_snapshot(today_str)
    if snap:
        s_expenses, s_savings, s_overspend, s_month = snap
        # –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ today's expenses_log
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("DELETE FROM expenses_log WHERE day=?", (today_str,))
            await db.commit()
        # –∑–∞–ø–∏—Å—É—î–º–æ snapshot –≤ budget
        await update_day(today_str, s_expenses, s_savings, s_overspend, s_month)
        return s_expenses, s_savings, s_overspend, s_month

    # 2) —Ñ–æ–ª–±–µ–∫ ‚Äî –±–µ—Ä–µ–º–æ –≤—á–æ—Ä–∞—à–Ω—ñ–π —Ä—è–¥–æ–∫
    today_dt = datetime.strptime(today_str, "%Y-%m-%d").date()
    yesterday_dt = today_dt - timedelta(days=1)
    y_str = yesterday_dt.strftime("%Y-%m-%d")
    y_expenses, y_savings, y_overspend, y_month = await get_day_data(y_str)
    # –≤–∏–¥–∞–ª—è—î–º–æ today's logs
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM expenses_log WHERE day=?", (today_str,))
        await db.commit()
    # –∑–∞–ø–∏—Å—É—î–º–æ –≤ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π —Ä—è–¥–æ–∫ —Å—Ç–∞–Ω –≤—á–æ—Ä–∞
    await update_day(today_str, y_expenses, y_savings, y_overspend, y_month)
    return y_expenses, y_savings, y_overspend, y_month


# --- –•–µ–Ω–¥–ª–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@dp.message()
async def handle_message(message: Message):
    global last_amount, last_comment

    if message.chat.id != GROUP_ID:
        return

    text_msg = message.text.strip()

    # --- /—ñ–Ω—Ñ–æ ---
    if text_msg == "/—ñ–Ω—Ñ–æ":
        help_text = (
            "üìå <b>–ö–æ–º–∞–Ω–¥–∏:</b>\n\n"
            "üîÑ /—á ‚Äì —Å–∫–∞—Å—É–≤–∞—Ç–∏ <u>–æ—Å—Ç–∞–Ω–Ω—é –≤–∏—Ç—Ä–∞—Ç—É</u> (–ø–æ —á–µ—Ä–∑—ñ).\n"
            "üßπ /–¥ ‚Äì –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—Ç–∞–Ω <u>–Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –¥–Ω—è</u> (—Å—Ç–∞–Ω –ø—ñ—Å–ª—è –≤—á–æ—Ä–∞—à–Ω—å–æ–≥–æ –ø—ñ–¥—Å—É–º–∫—É).\n"
            "üìä /–∑–≤—ñ—Ç ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç, –±—é–¥–∂–µ—Ç–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –∑ 5 –ø–æ 4).\n"
            "‚ÑπÔ∏è /—ñ–Ω—Ñ–æ ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
        )
        asyncio.create_task(message.reply(help_text, parse_mode="HTML"))
        return

    # --- /–∑–≤—ñ—Ç ---
    if text_msg == "/–∑–≤—ñ—Ç":
        now = datetime.now(timezone.utc) + timedelta(hours=TIMEZONE_OFFSET)
        today_str = now.strftime("%Y-%m-%d")
        expenses, savings, overspend, month_expenses = await get_day_data(today_str)

        total_month, start, end = await get_month_expenses_for_date(now.date())
        days_in_period = (end - start).days + 1
        month_limit = DAILY_LIMIT * days_in_period
        month_left = max(0, month_limit - total_month - 0)  # total_month already sums stored month_expenses across days

        # effective available budget for today ‚Äî –±–µ—Ä–µ–º–æ overspend –∑ today-record (—Ü–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –∑ –≤—á–æ—Ä–∞)
        effective_overspend = overspend
        available_budget = DAILY_LIMIT - effective_overspend if effective_overspend > 0 else DAILY_LIMIT
        balance = max(0, available_budget - expenses)

        text = (
            f"üìä <b>–ó–≤—ñ—Ç –∑–∞ {today_str}</b>\n\n"
            f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ: {expenses} –≥—Ä–Ω\n"
            f"üìâ –ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {balance} –≥—Ä–Ω (–∑ {available_budget})\n"
            f"üí∞ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {savings} –≥—Ä–Ω\n"
            f"üóìÔ∏è –í—Å—å–æ–≥–æ –∑–∞ –ø–µ—Ä—ñ–æ–¥ {start.strftime('%d.%m')} - {(end - timedelta(days=0)).strftime('%d.%m')}: {total_month} –≥—Ä–Ω\n"
            f"üìå –ó–∞–ª–∏—à–æ–∫ –Ω–∞ –ø–µ—Ä—ñ–æ–¥: {month_left} –≥—Ä–Ω"
        )
        if effective_overspend > 0:
            text += f"\n‚ö†Ô∏è –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –±–æ—Ä–≥: {effective_overspend} –≥—Ä–Ω"

        await message.reply(text, parse_mode="HTML")
        return

    # --- /–¥: –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—Ç–∞–Ω –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –¥–Ω—è (snapshot –∞–±–æ –≤—á–æ—Ä–∞) ---
    if text_msg == "/–¥":
        now = datetime.now(timezone.utc) + timedelta(hours=TIMEZONE_OFFSET)
        today_str = now.strftime("%Y-%m-%d")

        restored_exp, restored_sav, restored_over, restored_month = await revert_to_snapshot_or_yesterday(today_str)

        available_budget = DAILY_LIMIT - restored_over if restored_over > 0 else DAILY_LIMIT
        balance = max(0, available_budget - restored_exp)

        text = (
            f"üßπ –ü–æ–≤–µ—Ä–Ω—É—Ç–æ —Å—Ç–∞–Ω –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –¥–Ω—è ({today_str}).\n\n"
            f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {restored_exp} –≥—Ä–Ω\n"
            f"üìâ –ó–∞–ª–∏—à–æ–∫: {balance} –≥—Ä–Ω (–∑ {available_budget})\n"
            f"üí∞ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {restored_sav} –≥—Ä–Ω"
        )
        if restored_over > 0:
            text += f"\n‚ö†Ô∏è –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –±–æ—Ä–≥: {restored_over} –≥—Ä–Ω"

        await message.reply(text, parse_mode="HTML")
        return

    # --- /—á: –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –≤–∏—Ç—Ä–∞—Ç—É (–ø–æ —á–µ—Ä–∑—ñ) ---
    if text_msg == "/—á":
        now = datetime.now(timezone.utc) + timedelta(hours=TIMEZONE_OFFSET)
        today_str = now.strftime("%Y-%m-%d")

        res = await cancel_last_expense(today_str)
        if not res:
            await message.reply("–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
            return
        amount, new_expenses, savings, overspend, new_month_expenses = res

        # effective overspend: –±–µ—Ä–µ–º–æ –∑ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É (—Ü–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –∑ —É—á–æ—Ä–∞),
        # —è–∫—â–æ 0, –ø—Ä–æ–±—É—î–º–æ snapshot –∞–±–æ –≤—á–æ—Ä–∞ —è–∫ —Ñ–æ–ª–±–µ–∫
        effective_overspend = overspend
        if effective_overspend == 0:
            snap = await get_snapshot(today_str)
            if snap:
                effective_overspend = snap[2]
            else:
                # —Ñ–æ–ª–±–µ–∫ –≤—á–æ—Ä–∞
                yesterday_str = (now - timedelta(days=1)).strftime("%Y-%m-%d")
                _, _, y_overs, _ = await get_day_data(yesterday_str)
                effective_overspend = y_overs

        available_budget = DAILY_LIMIT - effective_overspend if effective_overspend > 0 else DAILY_LIMIT
        balance = max(0, available_budget - new_expenses)

        text = (
            f"‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {amount} –≥—Ä–Ω\n"
            f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {new_expenses} –≥—Ä–Ω\n"
            f"üìâ –ó–∞–ª–∏—à–æ–∫: {balance} –≥—Ä–Ω (–∑ {available_budget})\n"
            f"üí∞ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {savings} –≥—Ä–Ω\n"
        )
        if effective_overspend > 0:
            text += f"‚ö†Ô∏è –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –±–æ—Ä–≥: {effective_overspend} –≥—Ä–Ω\n"

        await message.reply(text, parse_mode="HTML")
        return

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ (–ª–æ–≥—É–≤–∞–Ω–Ω—è + –æ–Ω–æ–≤–ª–µ–Ω–Ω—è budget) ---
    match = re.match(r"^([\d\.,]+)(?:\s*(.*))?$", text_msg)
    if not match:
        return
    raw_amount = match.group(1).replace(",", ".")
    try:
        amount = int(float(raw_amount))
    except ValueError:
        return
    comment = match.group(2) if match.group(2) else ""

    now = datetime.now(timezone.utc) + timedelta(hours=TIMEZONE_OFFSET)
    today_str = now.strftime("%Y-%m-%d")

    # –±–µ—Ä–µ–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –¥–Ω—è
    expenses, savings, overspend, month_expenses = await get_day_data(today_str)

    # –ª–æ–≥ –≤–∏—Ç—Ä–∞—Ç–∏ (—â–æ–± –ø–æ—Ç—ñ–º /—á –º—ñ–≥ —ó—ó –≤–∏–¥–∞–ª–∏—Ç–∏)
    await log_expense(today_str, amount, comment)

    # –¥–æ–¥–∞—î–º–æ –≤–∏—Ç—Ä–∞—Ç—É
    expenses += amount
    month_expenses += amount

    # effective overspend ‚Äî –±–µ—Ä–µ–º–æ –∑—ñ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É (—Ü–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑ —É—á–æ—Ä–∞)
    effective_overspend = overspend
    if effective_overspend == 0:
        # —è–∫—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π overspend ==0 ‚Äî –º–æ–∂–ª–∏–≤–æ –Ω–µ –±—É–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ snapshot (—Å—Ç–∞—Ä—Ç–∞–ø)
        snap = await get_snapshot(today_str)
        if snap:
            effective_overspend = snap[2]
        else:
            # —Ñ–æ–ª–±–µ–∫: –¥–∏–≤–∏–º–æ—Å—å –≤—á–æ—Ä–∞
            yesterday_str = (now - timedelta(days=1)).strftime("%Y-%m-%d")
            _, _, y_overs, _ = await get_day_data(yesterday_str)
            effective_overspend = y_overs

    available_budget = DAILY_LIMIT - effective_overspend if effective_overspend > 0 else DAILY_LIMIT
    balance = max(0, available_budget - expenses)

    # –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
    await update_day(today_str, expenses, savings, effective_overspend, month_expenses)

    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ last_amount –¥–ª—è –±–µ–∫-—Å–æ–≤–º–µ—Å—Ç–Ω–æ—Å—Ç—ñ (–∞–ª–µ /—á –ø—Ä–∞—Ü—é—î –∑ –ª–æ–≥–æ–º)
    last_amount = amount
    last_comment = comment

    # –º—ñ—Å—è—á–Ω—ñ –¥–∞–Ω—ñ (–∑–∞ –±—é–¥–∂–µ—Ç–Ω–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º)
    total_month, start, end = await get_month_expenses_for_date(now.date())
    days_in_period = (end - start).days + 1
    month_limit = DAILY_LIMIT * days_in_period
    month_left = max(0, month_limit - total_month)

    text = f"üî¥ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç–∏: {amount} –≥—Ä–Ω"
    if comment:
        text += f"  <i>({comment})</i>"
    text += (
        f"\n\nüî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {expenses} –≥—Ä–Ω\n"
        f"üìâ –ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {balance} –≥—Ä–Ω (–∑ {available_budget})\n"
        f"üí∞ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {savings} –≥—Ä–Ω\n"
        f"üóìÔ∏è –í—Å—å–æ–≥–æ –∑–∞ –±—é–¥–∂–µ—Ç–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ {start.strftime('%d.%m')} - {(end - timedelta(days=0)).strftime('%d.%m')}: {total_month} –≥—Ä–Ω\n"
        f"üìå –ó–∞–ª–∏—à–æ–∫ –Ω–∞ –ø–µ—Ä—ñ–æ–¥: {month_left} –≥—Ä–Ω"
    )
    if effective_overspend > 0:
        text += f"\n‚ö†Ô∏è –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –±–æ—Ä–≥: {effective_overspend} –≥—Ä–Ω"

    await message.reply(text, parse_mode="HTML")


# --- –ê–≤—Ç–æ–∑–≤—ñ—Ç –æ 23:00 (–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è snapshot –¥–ª—è next_day) ---
async def daily_summary():
    local_tz = timezone(timedelta(hours=TIMEZONE_OFFSET))
    await init_db()

    while True:
        now = datetime.now(local_tz)
        target = datetime.combine(now.date(), datetime.min.time(), tzinfo=local_tz) + timedelta(hours=23)
        if now > target:
            target += timedelta(days=1)
        wait_seconds = (target - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        today = datetime.now(local_tz)
        today_str = today.strftime("%Y-%m-%d")
        next_date = today + timedelta(days=1)
        next_day = next_date.strftime("%Y-%m-%d")

        # –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
        expenses, savings, overspend, month_expenses = await get_day_data(today_str)

        # effective overspend ‚Äî —Ü–µ –≤–∂–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è, —è–∫–µ –±—É–ª–æ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –¥–Ω—è
        available_budget = DAILY_LIMIT - overspend if overspend > 0 else DAILY_LIMIT

        if expenses <= available_budget:
            balance = available_budget - expenses
            savings += balance
            new_overspend = 0
        else:
            new_overspend = expenses - available_budget

        # –Ω–æ–≤—ñ –º—ñ—Å—è—á–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        new_month_expenses = month_expenses  # month_expenses –∑–±–µ—Ä—ñ–≥–∞—î –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è; –º–∏ –º–∞—î–º–æ –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ –≤–æ–Ω–æ –≤–∫–ª—é—á–∞—î —Å—å–æ–≥–æ–¥–Ω—ñ
        # –Ø–∫—â–æ month_expenses –≤ –Ω–∞—à—ñ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –Ω–µ –≤–∫–ª—é—á–∞—î today's expenses, —Ç–æ new_month_expenses = month_expenses + expenses.
        # –£ –Ω–∞—à—ñ–π –ª–æ–≥—ñ—Ü—ñ –º–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ month_expenses –≤–∂–µ —è–∫ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è; –∞–ª–µ –Ω–∞–¥—ñ–π–Ω–æ –¥–æ–¥–∞–º–æ:
        new_month_expenses = max(0, new_month_expenses + 0)  # –±–µ–∑–ø–µ—á–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å)
        # –£ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –º—ñ—Å—Ü—è—Ö month_expenses –≤–∂–µ –∑–±—ñ–ª—å—à—É–≤–∞–≤—Å—è –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç,
        # —Ç–æ–º—É —Ç—É—Ç –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î.

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –Ω–æ–≤–∏–π –±—é–¥–∂–µ—Ç–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è (5-–µ —á–∏—Å–ª–æ)
        if next_date.day == 5:
            # –Ω–æ–≤–∏–π –±—é–¥–∂–µ—Ç–Ω–∏–π –º—ñ—Å—è—Ü—å –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è ‚Äî —Å–∫–∏–¥–∞—î–º–æ savings —ñ month_expenses
            await update_day(next_day, 0, 0, 0, 0)
            # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ snapshot —Ç–µ–∂
            await save_snapshot(next_day, 0, 0, 0, 0)
            month_text = "‚úÖ –ë—é–¥–∂–µ—Ç–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞ (–¥–∞–Ω—ñ —Å–∫–∏–Ω—É—Ç–æ)."
        else:
            # –∑–∞–ø–∏—Å—É—î–º–æ —Å—Ç–∞–Ω –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è (—Ç–µ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–±–∞—á–∏—Ç—å –≤—Ä–∞–Ω—Ü—ñ)
            await update_day(next_day, 0, savings, new_overspend, new_month_expenses)
            # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ snapshot –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ /–¥
            await save_snapshot(next_day, 0, savings, new_overspend, new_month_expenses)
            # –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            total_month, start, end = await get_month_expenses_for_date(today.date())
            days_in_period = (end - start).days + 1
            month_limit = DAILY_LIMIT * days_in_period
            month_left = max(0, month_limit - total_month)
            month_text = f"üóìÔ∏è –í—Å—å–æ–≥–æ –∑–∞ –ø–µ—Ä—ñ–æ–¥ {start.strftime('%d.%m')} - {(end - timedelta(days=0)).strftime('%d.%m')}: {total_month} –≥—Ä–Ω\nüìå –ó–∞–ª–∏—à–æ–∫ –Ω–∞ –ø–µ—Ä—ñ–æ–¥: {month_left} –≥—Ä–Ω"

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = (
            f"üìä <b>–ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è ({today_str})</b>\n"
            f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {expenses} –≥—Ä–Ω\n"
            f"üìâ –ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {max(0, available_budget - expenses)} –≥—Ä–Ω\n"
            f"üí∞ –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è: {savings} –≥—Ä–Ω\n"
            f"{month_text}"
        )
        if new_overspend > 0:
            text += f"\n‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—Ç—Ä–∞—Ç–∞: {new_overspend} –≥—Ä–Ω (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞)"

        try:
            await bot.send_message(GROUP_ID, text, parse_mode="HTML")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {e}")


# --- –ì–æ–ª–æ–≤–Ω–∞ ---
async def main():
    await init_db()
    asyncio.create_task(daily_summary())
    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ polling: {e}")
            await asyncio.sleep(5)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ó—É–ø–∏–Ω–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
