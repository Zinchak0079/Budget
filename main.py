import asyncio
import aiosqlite
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TOKEN = "8274894041:AAGEJSRDxWHbEriVnneByDtZtK_qu-vmflU"
GROUP_ID = -1003083789411  # —Ç–≤—ñ–π –≥—Ä—É–ø ID
DAILY_BUDGET = 1000
TIMEZONE_OFFSET = 2  # —Ç–≤—ñ–π –ø–æ—è—Å UTC+2

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

DB_PATH = "budget.db"

# --- –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ ---
last_amount = 0

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î ---
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS budget (
                day TEXT PRIMARY KEY,
                expenses INTEGER DEFAULT 0,
                savings INTEGER DEFAULT 0
            )
        """)
        await db.commit()

# --- –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–Ω—è ---
async def get_day_data(day: str):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT expenses, savings FROM budget WHERE day=?", (day,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return row[0], row[1]
            else:
                await db.execute("INSERT INTO budget (day, expenses, savings) VALUES (?, 0, 0)", (day,))
                await db.commit()
                return 0, 0

# --- –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—å ---
async def get_month_expenses(year: int, month: int):
    month_str = f"{year}-{month:02d}-%"
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT SUM(expenses) FROM budget WHERE day LIKE ?", (month_str,)) as cursor:
            row = await cursor.fetchone()
            return row[0] if row[0] else 0

# --- –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –¥–Ω—è ---
async def update_day(day: str, expenses: int, savings: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("REPLACE INTO budget (day, expenses, savings) VALUES (?, ?, ?)",
                         (day, expenses, savings))
        await db.commit()

# --- –•–µ–Ω–¥–ª–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≥—Ä—É–ø—ñ ---
@dp.message()
async def handle_message(message: Message):
    global last_amount

    if message.chat.id != GROUP_ID:
        return

    text_msg = message.text.strip()

    # --- /—ñ–Ω—Ñ–æ ---
    if text_msg == "/—ñ–Ω—Ñ–æ":
        help_text = (
            "üìå <b>–ö–æ–º–∞–Ω–¥–∏:</b>\n\n"
            "üîÑ /—á ‚Äì —Å–∫–∞—Å—É–≤–∞—Ç–∏ <u>–æ—Å—Ç–∞–Ω–Ω—é –≤–∏—Ç—Ä–∞—Ç—É</u> —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.\n"
            "üßπ /–¥ ‚Äì –≤–∏–¥–∞–ª–∏—Ç–∏ <u>—É—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ</u>, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è 23:00 —É—á–æ—Ä–∞.\n"
            "‚ÑπÔ∏è /—ñ–Ω—Ñ–æ ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥."
        )
        await message.reply(help_text, parse_mode="HTML")
        return

    # --- /–¥: —Å–∫–∏–¥–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –¥–Ω—è ---
    if text_msg == "/–¥":
        today = datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
        yesterday = (today - timedelta(days=1)).strftime("%Y-%m-%d")
        today_str = today.strftime("%Y-%m-%d")
        month_name = today.strftime("%B")
        year, month = today.year, today.month

        _, yesterday_savings = await get_day_data(yesterday)
        await update_day(today_str, 0, yesterday_savings)

        month_expenses = await get_month_expenses(year, month)

        text = (
            f"üßπ –í—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n\n"
            f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ: 0 –≥—Ä–Ω\n"
            f"üìâ –ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {DAILY_BUDGET} –≥—Ä–Ω\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è –Ω–∞ {month_name}: {yesterday_savings} –≥—Ä–Ω\n"
            f"üóìÔ∏è –í—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –º—ñ—Å—è—Ü—å: {month_expenses} –≥—Ä–Ω"
        )
        await message.reply(text)
        return

    # --- /—á: –≤—ñ–¥–∫–∞—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ ---
    if text_msg == "/—á":
        if last_amount == 0:
            await message.reply("–ù–µ–º–∞—î –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
            return

        today = datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
        today_str = today.strftime("%Y-%m-%d")
        month_name = today.strftime("%B")
        year, month = today.year, today.month

        expenses, savings = await get_day_data(today_str)
        expenses -= last_amount
        if expenses < 0:
            expenses = 0

        balance = DAILY_BUDGET - expenses
        if balance < 0:
            balance = 0

        await update_day(today_str, expenses, savings)
        month_expenses = await get_month_expenses(year, month)

        text = (
            f"‚ùå –û—Å—Ç–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞ ({last_amount} –≥—Ä–Ω) —Å–∫–∞—Å–æ–≤–∞–Ω–∞\n\n"
            f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ: {expenses} –≥—Ä–Ω\n"
            f"üìâ –ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {balance} –≥—Ä–Ω\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è –Ω–∞ {month_name}: {savings} –≥—Ä–Ω\n"
            f"üóìÔ∏è –í—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –º—ñ—Å—è—Ü—å: {month_expenses} –≥—Ä–Ω"
        )
        last_amount = 0
        await message.reply(text)
        return

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ ---
    try:
        amount = int(text_msg)
    except (ValueError, AttributeError):
        return

    today = datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
    today_str = today.strftime("%Y-%m-%d")
    month_name = today.strftime("%B")
    year, month = today.year, today.month

    expenses, savings = await get_day_data(today_str)
    expenses += amount
    await update_day(today_str, expenses, savings)

    balance = DAILY_BUDGET - expenses
    if balance < 0:
        balance = 0

    last_amount = amount
    month_expenses = await get_month_expenses(year, month)

    text = (
        f"üî¥ <b>–î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç–∏: {amount} –≥—Ä–Ω</b>\n\n"
        f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ: {expenses} –≥—Ä–Ω\n"
        f"üìâ –ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {balance} –≥—Ä–Ω\n"
        f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è –Ω–∞ {month_name}: {savings} –≥—Ä–Ω\n"
        f"üóìÔ∏è –í—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –º—ñ—Å—è—Ü—å: {month_expenses} –≥—Ä–Ω"
    )
    await message.reply(text, parse_mode="HTML")

# --- –ê–≤—Ç–æ–∑–≤—ñ—Ç –æ 23:00 ---
async def daily_summary():
    global last_amount
    await init_db()
    while True:
        now = datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
        target = datetime.combine(now.date(), datetime.min.time()) + timedelta(hours=23)
        if now > target:
            target += timedelta(days=1)
        wait_seconds = (target - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        today = datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
        day = (today - timedelta(seconds=1)).strftime("%Y-%m-%d")
        month_name = today.strftime("%B")
        year, month = today.year, today.month

        expenses, savings = await get_day_data(day)
        balance = DAILY_BUDGET - expenses
        if balance > 0:
            savings += balance
        await update_day(day, 0, savings)

        month_expenses = await get_month_expenses(year, month)

        text = (
            f"üìä <b>–ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è ({day})</b>\n"
            f"üî¥ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {expenses} –≥—Ä–Ω\n"
            f"üìâ –ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {balance if balance>0 else 0} –≥—Ä–Ω\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è –Ω–∞ {month_name}: {savings} –≥—Ä–Ω\n"
            f"üóìÔ∏è –í—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –º—ñ—Å—è—Ü—å: {month_expenses} –≥—Ä–Ω"
        )
        try:
            await bot.send_message(GROUP_ID, text, parse_mode="HTML")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

        last_amount = 0  # –æ—á–∏—â–∞—î–º–æ –ø—ñ—Å–ª—è –ø—ñ–¥—Å—É–º–∫—É

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
async def main():
    await init_db()
    asyncio.create_task(daily_summary())

    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ polling: {e}")
            await asyncio.sleep(5)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ó—É–ø–∏–Ω–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
